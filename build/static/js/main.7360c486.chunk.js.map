{"version":3,"sources":["assets/transparent-logo.png","components/TopAppBar.tsx","components/DrawerList.tsx","components/AppDrawer.tsx","components/Theming.tsx","components/EmployeeList.tsx","components/SkillAutocomplete.tsx","components/Employees.tsx","components/Skills.tsx","components/EmployeeProfile.tsx","App.tsx","serviceWorker.ts","aws-exports.js","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","drawerWidth","marginLeft","easeOut","enteringScreen","toolbar","display","alignItems","justifyContent","hide","logo","height","color","margin","TopAppBar","drawerOpen","setDrawerOpen","classes","AppBar","className","clsx","position","Toolbar","IconButton","onClick","src","Typography","variant","text","palette","secondary","light","DrawerList","history","useHistory","linkMap","link","map","item","index","ListItem","push","button","key","ListItemText","primary","List","drawer","flexShrink","drawerPaper","backgroundColor","drawerHeader","white","AppDrawer","Drawer","anchor","open","paper","Divider","themeInstance","createMuiTheme","main","Theming","children","ThemeProvider","ListEmployees","gql","avatar","border","borderRadius","fontWeight","cursor","EmployeeList","useQuery","loading","data","employeeMap","listEmployees","items","employee","initials","firstname","toUpperCase","lastname","id","ListItemAvatar","Button","Paper","LIST_SKILLS","createSkillQuery","Label","styled","InputWrapper","Tag","label","onDelete","props","Listbox","SkillAutocomplete","handleSkills","useMutation","createSkill","useState","name","skills","updateSkills","useEffect","prevSkills","listSkills","useAutocomplete","multiple","options","getOptionLabel","option","getRootProps","getInputLabelProps","getInputProps","getTagProps","getListboxProps","getOptionProps","groupedOptions","value","focused","setAnchorEl","inputProps","NoSsr","ref","fontSize","variables","then","res","prevState","content","padding","contentShift","mixins","heading","textAlign","form","flexDirection","nameContainer","marginTop","CreateEmployee","CreateEmployeeSkill","Employees","setFirstname","setLastname","setSkills","addEmployee","addEmployeeSkill","btnDisable","setBtnDisable","length","AsyncAddEmployeeSkill","employeeId","skillId","a","response","TextField","onChange","e","currentTarget","handleFirstname","handleLastname","disabled","type","preventDefault","createEmployee","i","hidden","error","getEmployeeSkills","Skills","emptyError","setEmptyError","employees","setEmployees","filteredEmployees","listEmployeeSkills","j","isDuplicate","k","skill","getEmployeeQuery","deleteSkillQuery","center","inline","EmployeePlaceholder","EmployeeProfile","useParams","refetch","deleteSkill","setEmployee","adding","setAdding","skillsInput","setSkillsInput","getEmployee","skillMap","Grid","container","xs","createdAt","prevVal","App","handleSetDrawerOpen","CssBaseline","exact","path","component","Boolean","window","location","hostname","match","awsmobile","Amplify","configure","awsExports","config","url","aws_appsync_graphqlEndpoint","region","aws_appsync_region","auth","AUTH_TYPE","API_KEY","apiKey","aws_appsync_apiKey","ApolloLink","from","createAuthLink","createHttpLink","uri","client","ApolloClient","cache","InMemoryCache","addTypename","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7360c486.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/transparent-logo.f568b3f7.png\";","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport { drawerWidth } from '../App'\r\nimport logo from '../assets/transparent-logo.png'\r\n\r\n\r\ntype TopAppBarProps = {\r\n    drawerOpen: boolean,\r\n    setDrawerOpen: Function,\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        alignItems:'center',\r\n        justifyContent: 'flex-start'\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    logo: {\r\n        height: '2rem',\r\n        color: 'white',\r\n        margin: '0 1rem',\r\n    }\r\n}))\r\n\r\nconst TopAppBar = ({ drawerOpen, setDrawerOpen }: TopAppBarProps) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <AppBar \r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: drawerOpen,\r\n            })} \r\n            position= 'fixed'\r\n        >\r\n            <Toolbar className={classes.toolbar} >\r\n                <IconButton \r\n                    className={clsx(classes.menuButton, {\r\n                        [classes.hide]: drawerOpen\r\n                    })} \r\n                    color=\"inherit\" \r\n                    onClick={() => setDrawerOpen()}\r\n                >\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <img src={logo} className={classes.logo}/>\r\n\r\n                <Typography \r\n                    variant=\"h6\" \r\n                    className={classes.title} \r\n                >\r\n                    e-Manager\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default TopAppBar","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    text: {\r\n        color: theme.palette.secondary.light\r\n    }\r\n}))\r\nconst DrawerList = () => {\r\n    const classes = useStyles()\r\n    const history = useHistory()\r\n    const links = [\r\n        // {\r\n        //     text: 'Dashboard',\r\n        //     link: '/',\r\n        // },\r\n        {\r\n            text: 'Employees',\r\n            link: '/',\r\n        },\r\n        {\r\n            text: 'Search',\r\n            link: '/skills',\r\n        }\r\n    ]\r\n\r\n    const linkMap = links.map( (item, index) => {\r\n        return (\r\n            <ListItem onClick={() => history.push(item.link)} button key={index} >\r\n                <ListItemText className={classes.text} primary={item.text} />\r\n            </ListItem>\r\n        )\r\n    })\r\n    return (\r\n        <List>\r\n            {linkMap}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default DrawerList","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport DrawerList from './DrawerList'\r\nimport { drawerWidth } from '../App'\r\n\r\ntype AppDrawerProps = {\r\n    drawerOpen: boolean,\r\n    setDrawerOpen: Function\r\n}\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        backgroundColor: theme.palette.primary.light\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        margin: theme.spacing(3)\r\n    },\r\n    white: {\r\n        color: 'white'\r\n    }\r\n}))\r\n\r\n\r\nconst AppDrawer = ({ drawerOpen, setDrawerOpen }: AppDrawerProps) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant='persistent'\r\n            anchor=\"left\"\r\n            open={drawerOpen}\r\n            classes={{\r\n                paper: classes.drawerPaper\r\n            }}\r\n        >\r\n            <div className={classes.drawerHeader}>\r\n                <IconButton className={classes.white} onClick={() => setDrawerOpen()}>\r\n                    <ChevronLeftIcon />\r\n                </IconButton>\r\n            </div>\r\n            <Divider/>\r\n            <DrawerList/>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default AppDrawer","import React from 'react'\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\ntype ThemingProps = {\r\n    children: React.ReactNode\r\n}\r\n\r\nconst themeInstance = createMuiTheme({\r\n    spacing: 2,\r\n    palette: {\r\n        primary: {\r\n            main: '#131c2e',\r\n            light: '#202b43'\r\n        },\r\n        secondary: {\r\n            main: '#25334e',\r\n            light: '#e5ebef'\r\n        },\r\n    },\r\n})\r\n\r\nconst Theming = ({children}: ThemingProps) => {\r\n    return (\r\n        <div>\r\n            <ThemeProvider theme={themeInstance}>\r\n                {children}\r\n            </ThemeProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Theming","import React from 'react';\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Button from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { useQuery, gql } from '@apollo/client'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport const ListEmployees = gql` query ListEmployees{\r\n  listEmployees {\r\n    items {\r\n      firstname\r\n      lastname\r\n      id\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    avatar: {\r\n        width: 40,\r\n        height: 40,\r\n        border: '1px solid black',\r\n        borderRadius: '50%',\r\n        fontWeight: 'bold',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        margin: `${theme.spacing(3)}px auto`,\r\n        width: '95%'\r\n    },\r\n    cursor: {\r\n        cursor: 'pointer'\r\n    }\r\n}))\r\n\r\n\r\nconst EmployeeList = () => {\r\n    const history = useHistory()\r\n    const { loading, data } = useQuery(ListEmployees)\r\n    const classes = useStyles()\r\n    const employeeMap = !loading ? data.listEmployees.items.map((employee: any, index: number) => {\r\n        let initials = employee.firstname[0].toUpperCase() + employee.lastname[0].toUpperCase()\r\n        return (\r\n            <div key={index} >\r\n                <ListItem className={classes.cursor} onClick={() => history.push(`/employees/${employee.id}`)} >\r\n                    <ListItemAvatar>\r\n                        <Typography className={classes.avatar}>\r\n                            {initials}\r\n                        </Typography>\r\n                    </ListItemAvatar>\r\n                    <ListItemText primary={`${employee.firstname} ${employee.lastname}`} />\r\n                    <Button>View Profile</Button>\r\n                </ListItem>\r\n                <Divider />\r\n            </div>\r\n        )\r\n    }) : null\r\n    return (\r\n        <Paper className={classes.paper} >\r\n            <List>\r\n                {employeeMap}\r\n            </List>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default EmployeeList","import React, { useState, useEffect } from 'react';\r\nimport useAutocomplete from '@material-ui/lab/useAutocomplete';\r\nimport NoSsr from '@material-ui/core/NoSsr';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport styled from 'styled-components';\r\nimport { gql, useQuery, useMutation } from '@apollo/client'\r\nimport { SkillsType } from '../types'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nexport const LIST_SKILLS = gql`query listSkills {\r\n  listSkills {\r\n    items {\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const createSkillQuery = gql`\r\n  mutation createSkill($name: String!){\r\n    createSkill(input: {name: $name}) {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`\r\n\r\nconst Label = styled('label')`\r\n  padding: 0 0 4px;\r\n  line-height: 1.5;\r\n  display: block;\r\n`;\r\n\r\nconst InputWrapper = styled('div')`\r\n  width: 300px;\r\n  border: 1px solid #d9d9d9;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  padding: 1px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n\r\n  &:hover {\r\n    border-color: #40a9ff;\r\n  }\r\n\r\n  &.focused {\r\n    border-color: #40a9ff;\r\n    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\r\n  }\r\n\r\n  & input {\r\n    font-size: 14px;\r\n    height: 30px;\r\n    box-sizing: border-box;\r\n    padding: 4px 6px;\r\n    width: 0;\r\n    min-width: 30px;\r\n    flex-grow: 1;\r\n    border: 0;\r\n    margin: 0;\r\n    outline: 0;\r\n  }\r\n`;\r\n\r\nconst Tag = styled(({ label, onDelete, ...props }) => (\r\n  <div {...props}>\r\n    <span>{label}</span>\r\n    <CloseIcon onClick={onDelete} />\r\n  </div>\r\n))`\r\n  display: flex;\r\n  align-items: center;\r\n  height: 24px;\r\n  margin: 2px;\r\n  line-height: 22px;\r\n  background-color: #fafafa;\r\n  border: 1px solid #e8e8e8;\r\n  border-radius: 2px;\r\n  box-sizing: content-box;\r\n  padding: 0 4px 0 10px;\r\n  outline: 0;\r\n  overflow: hidden;\r\n\r\n  &:focus {\r\n    border-color: #40a9ff;\r\n    background-color: #e6f7ff;\r\n  }\r\n\r\n  & span {\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n  }\r\n\r\n  & svg {\r\n    font-size: 12px;\r\n    cursor: pointer;\r\n    padding: 4px;\r\n  }\r\n`;\r\n\r\nconst Listbox = styled('ul')`\r\n  width: 300px;\r\n  margin: 2px 0 0;\r\n  padding: 0;\r\n  position: absolute;\r\n  list-style: none;\r\n  background-color: #fff;\r\n  overflow: auto;\r\n  max-height: 250px;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\r\n  z-index: 1;\r\n\r\n  & li {\r\n    padding: 5px 12px;\r\n    display: flex;\r\n\r\n    & span {\r\n      flex-grow: 1;\r\n    }\r\n\r\n    & svg {\r\n      color: transparent;\r\n    }\r\n  }\r\n\r\n  & li[aria-selected='true'] {\r\n    background-color: #fafafa;\r\n    font-weight: 600;\r\n\r\n    & svg {\r\n      color: #1890ff;\r\n    }\r\n  }\r\n\r\n  & li[data-focus='true'] {\r\n    background-color: #e6f7ff;\r\n    cursor: pointer;\r\n\r\n    & svg {\r\n      color: #000;\r\n    }\r\n  }\r\n`;\r\n\r\ntype SkillAutoCompleteProps = {\r\n  handleSkills: Function\r\n}\r\nconst SkillAutocomplete = ({ handleSkills }: SkillAutoCompleteProps) => {\r\n  const { loading, data } = useQuery(LIST_SKILLS)\r\n  const [createSkill] = useMutation(createSkillQuery)\r\n  const [skills, updateSkills] = useState([{ id: '', name: '' }])\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      updateSkills(prevSkills => data.listSkills.items)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [loading])\r\n  const {\r\n    getRootProps,\r\n    getInputLabelProps,\r\n    getInputProps,\r\n    getTagProps,\r\n    getListboxProps,\r\n    getOptionProps,\r\n    groupedOptions,\r\n    value,\r\n    focused,\r\n    setAnchorEl,\r\n  } = useAutocomplete({\r\n    id: 'skill-autocomplete-hook',\r\n    // defaultValue: ,\r\n    multiple: true,\r\n    options: skills,\r\n    getOptionLabel: (option) => option.name,\r\n  });\r\n  const inputProps: any = getInputProps()\r\n  const handleCreateSkill = () => {\r\n    createSkill({ variables: { name: inputProps.value } }).then(res => {\r\n      updateSkills(prevState => {\r\n        return [\r\n          ...prevState,\r\n          res.data.createSkill\r\n        ]\r\n      })\r\n    })\r\n  }\r\n  useEffect(() => {\r\n    handleSkills(value)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [value])\r\n  return (\r\n    <NoSsr>\r\n      <div>\r\n        <div {...getRootProps()}>\r\n          <Label {...getInputLabelProps()}></Label>\r\n          <InputWrapper ref={setAnchorEl} className={focused ? 'focused' : ''}>\r\n            {value.map((option: SkillsType, index: number) => (\r\n              <Tag label={option.name} {...getTagProps({ index })} />\r\n            ))}\r\n            <input {...getInputProps()} />\r\n          </InputWrapper>\r\n        </div>\r\n        {focused ? (\r\n          <Listbox {...getListboxProps()}>\r\n            {groupedOptions.map((option, index) => (\r\n              <li {...getOptionProps({ option, index })}>\r\n                <span>{option.name}</span>\r\n                <CheckIcon fontSize=\"small\" />\r\n              </li>\r\n            ))}\r\n            {inputProps.value ? (\r\n              <li>\r\n                <p>This Skill doesn't exist yet\r\n                  <Button onClick={handleCreateSkill} >Add Skill</Button>\r\n                </p>\r\n              </li>\r\n            ) : null}\r\n          </Listbox>\r\n        ) : null}\r\n      </div>\r\n    </NoSsr>\r\n  );\r\n}\r\n\r\n\r\nexport default SkillAutocomplete\r\n","import React, { useState, useEffect } from 'react'\r\nimport clsx from 'clsx'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { drawerWidth } from '../App'\r\nimport EmployeeList from './EmployeeList'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Button from '@material-ui/core/Button'\r\nimport SkillAutoComplete from './SkillAutocomplete'\r\nimport { useMutation, gql } from '@apollo/client'\r\nimport { SkillsType } from '../types'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    content: {\r\n        backgroundColor: theme.palette.secondary.light,\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    heading: {\r\n        textAlign: 'center',\r\n    },\r\n    paper: {\r\n        width: '70%',\r\n        margin: 'auto',\r\n    },\r\n    form: {\r\n        padding: theme.spacing(12),\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection: 'column'\r\n    },\r\n    nameContainer: {\r\n        display: 'flex',\r\n        \r\n    },\r\n    name: {\r\n        margin: `${theme.spacing(5)}px ${theme.spacing(2)}px`\r\n    },\r\n    button: {\r\n        marginTop: theme.spacing(6)\r\n    }\r\n\r\n}))\r\n\r\ntype EmployeesProps = {\r\n    drawerOpen: boolean\r\n}\r\n\r\nconst CreateEmployee = gql`\r\n  mutation CreateEmployee($firstname: String!, $lastname: String!) {\r\n    createEmployee(input: {firstname: $firstname, lastname: $lastname}) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst CreateEmployeeSkill = gql`\r\n   mutation CreateEmployeeSkill($employeeId: ID!, $skillId: ID!) {\r\n           createEmployeeSkill( input: {employeeSkillEmployeeId: $employeeId, employeeSkillSkillId: $skillId} ) {\r\n               id\r\n           }\r\n       }\r\n`\r\n\r\nconst Employees = ({ drawerOpen }: EmployeesProps) => {\r\n    const history = useHistory()\r\n    const classes = useStyles()\r\n    const [firstname, setFirstname] = useState<string>('')\r\n    const [lastname, setLastname] = useState<string>('')\r\n    const [skills, setSkills] = useState<SkillsType[]>([])\r\n    const [addEmployee] = useMutation(CreateEmployee)\r\n    const [addEmployeeSkill] = useMutation(CreateEmployeeSkill)\r\n    const [btnDisable, setBtnDisable] = useState<boolean>(true)\r\n\r\n    useEffect( () => {\r\n        if(!!firstname && !!lastname && !!skills.length ){\r\n            setBtnDisable( prevState => false)\r\n        } else {\r\n            setBtnDisable( prevState => true)\r\n        }\r\n    }, [firstname, lastname, skills] )\r\n\r\n    const handleFirstname = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFirstname(e.currentTarget.value)\r\n    }\r\n\r\n    const handleLastname = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setLastname(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const handleSkills = (skills: SkillsType[]) => {\r\n        setSkills(prevState => skills)\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault()\r\n        addEmployee({ variables: { firstname, lastname } }).then(res => {\r\n            const employeeId = res.data.createEmployee.id\r\n            for(let i = 0; i < skills.length; i++){\r\n                AsyncAddEmployeeSkill(employeeId, skills[i].id)\r\n            }\r\n            history.push(`/employees/${employeeId}`)\r\n        })\r\n    }\r\n\r\n    const AsyncAddEmployeeSkill = async (employeeId: String, skillId:String) => {\r\n        const response = addEmployeeSkill({ variables: { employeeId, skillId } })\r\n        const data = await response\r\n        return data\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={clsx(classes.content, {\r\n                [classes.contentShift]: drawerOpen,\r\n            })}\r\n        >\r\n            <div className={classes.drawerHeader} />\r\n            <Typography className={classes.heading} variant='h6'>\r\n                Employees\r\n            </Typography>\r\n\r\n            <Paper className={classes.paper} >\r\n                <form className={classes.form} >\r\n                    <div className={classes.nameContainer} >\r\n                        <TextField\r\n                            id=\"firstname\"\r\n                            className={classes.name}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleFirstname(e)}\r\n                            value={firstname}\r\n                            label=\"First Name\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <TextField\r\n                            id=\"lastname\"\r\n                            className={classes.name}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleLastname(e)}\r\n                            value={lastname}\r\n                            label=\"Last Name\"\r\n                            variant='outlined'\r\n                        />\r\n                    </div>\r\n                    <Typography>Skills</Typography>\r\n                    <SkillAutoComplete handleSkills={handleSkills} />\r\n                    <Button\r\n                        disabled={btnDisable}\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        type=\"button\"\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        Create Employee\r\n                    </Button>\r\n                </form>\r\n\r\n            </Paper>\r\n\r\n            <EmployeeList/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Employees","\r\nimport React, { useState } from 'react';\r\nimport clsx from 'clsx'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\r\nimport { drawerWidth } from '../App'\r\nimport SkillAutoComplete from './SkillAutocomplete'\r\nimport { SkillsType, EmployeeType } from '../types'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport { gql, useQuery } from '@apollo/client'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    content: {\r\n        // backgroundColor: theme.palette.text.secondary,\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    hidden:{\r\n        display: 'none',\r\n    },\r\n    error: {\r\n        color: theme.palette.error.main\r\n    },\r\n    avatar: {\r\n        width: 40,\r\n        height: 40,\r\n        border: '1px solid black',\r\n        borderRadius: '50%',\r\n        fontWeight: 'bold',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n\r\n}))\r\n\r\nexport const getEmployeeSkills = gql`\r\n    query getEmployeeSkills {\r\n        listEmployeeSkills {\r\n            items {\r\n                id\r\n                skill {\r\n                    id\r\n            }\r\n            employee {\r\n                firstname\r\n                lastname\r\n                id\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n\r\n\r\ntype SkillProps = {\r\n    drawerOpen: boolean\r\n}\r\nconst Skills = ({ drawerOpen }: SkillProps) => {\r\n    const classes = useStyles()\r\n    const [skills, setSkills] = useState<SkillsType[]>([{ id: '', name: '' }])\r\n    const [emptyError, setEmptyError] = useState<Boolean>(false)\r\n    const { data, loading } = useQuery(getEmployeeSkills)\r\n    const [employees, setEmployees] = useState<any[]>([])\r\n    const handleSkills = (skills: SkillsType[]) => {\r\n        setSkills(prevState => skills)\r\n    }\r\n\r\n    const handleButton = () => {\r\n        if(skills.length === 0){\r\n            setEmptyError(true)\r\n        } else if(!loading){\r\n\r\n            const filteredEmployees:EmployeeType[] = []\r\n            const items = data.listEmployeeSkills.items\r\n\r\n            for(let i = 0; i < items.length; i++){\r\n                for(let j = 0; j < skills.length; j++){\r\n                    let isDuplicate = false\r\n                    for( let k = 0; k < filteredEmployees.length && !isDuplicate; k++){\r\n                        if(filteredEmployees[k].id === items[i].employee.id ){\r\n                            isDuplicate = true\r\n                        }\r\n                    }\r\n                    if(items[i].skill.id === skills[j].id && !isDuplicate){\r\n                        filteredEmployees.push(items[i].employee)\r\n                    }\r\n                }\r\n\r\n            }\r\n            setEmptyError(false)\r\n            setEmployees(prevState => filteredEmployees)\r\n        }\r\n    }\r\n\r\n    const employeeMap = employees.map((employee: any, index: number) => {\r\n        let initials = employee.firstname[0].toUpperCase() + employee.lastname[0].toUpperCase()\r\n        return (\r\n            <div key={index} >\r\n                <ListItem>\r\n                    <ListItemAvatar>\r\n                        <Typography className={classes.avatar}>\r\n                            {initials}\r\n                        </Typography>\r\n                    </ListItemAvatar>\r\n                    <ListItemText primary={`${employee.firstname} ${employee.lastname}`} />\r\n                </ListItem>\r\n                <Divider />\r\n            </div>\r\n        )\r\n    })\r\n    \r\n    return (\r\n        <div\r\n            className={clsx(classes.content, {\r\n                [classes.contentShift]: drawerOpen,\r\n            })}\r\n        >\r\n            <div className={classes.drawerHeader} />\r\n            <Typography>\r\n                Search for employees who match your desired skillset\r\n            </Typography>\r\n            <SkillAutoComplete handleSkills={handleSkills} />\r\n            <Button onClick={handleButton} variant=\"contained\">Search</Button>\r\n            <Typography \r\n                className={clsx(classes.error, {\r\n                    [classes.hidden]: !emptyError\r\n                })} \r\n            >\r\n                Please enter a skill to search\r\n            </Typography>\r\n\r\n            <List>\r\n                {employeeMap}\r\n            </List>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skills\r\n","import React, { useState, useEffect } from 'react'\r\nimport clsx from 'clsx'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { drawerWidth } from '../App'\r\nimport { gql, useQuery, useMutation } from '@apollo/client'\r\nimport { useParams } from 'react-router-dom'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport AddBoxIcon from '@material-ui/icons/AddBox'\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline'\r\nimport SkillAutocomplete from './SkillAutocomplete'\r\nimport { SkillsType } from '../types'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nconst getEmployeeQuery = gql`\r\n    query getEmployee($id: ID!) {\r\n        getEmployee(id: $id) {\r\n            createdAt\r\n            firstname\r\n            lastname\r\n            id\r\n            skills {\r\n                items {\r\n                    id\r\n                    skill {\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nconst CreateEmployeeSkill = gql`\r\n   mutation CreateEmployeeSkill($employeeId: ID!, $skillId: ID!) {\r\n           createEmployeeSkill( input: {employeeSkillEmployeeId: $employeeId, employeeSkillSkillId: $skillId} ) {\r\n               id\r\n           }\r\n       }\r\n`\r\n\r\nconst deleteSkillQuery = gql`\r\n    mutation deleteSkill($id: ID!) {\r\n        deleteEmployeeSkill(input: {id: $id}){\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    avatar: {\r\n        height: '150px',\r\n        width: '150px',\r\n        border: '1px solid black',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        borderRadius: '10%'\r\n    },\r\n    center: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    skill: {\r\n        backgroundColor: theme.palette.secondary.light,\r\n        margin: theme.spacing(2),\r\n        borderRadius: '10%'\r\n    },\r\n    inline: {\r\n        display: 'inline'\r\n    },\r\n    hidden: {\r\n        display: 'none',\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(6)\r\n    }\r\n\r\n}))\r\n\r\n\r\n\r\ntype DashboardProps = {\r\n    drawerOpen: boolean\r\n}\r\nconst EmployeePlaceholder = {\r\n    firstname: '?',\r\n    lastname: '?',\r\n    id: '',\r\n    skills: {\r\n        items: []\r\n    }\r\n}\r\n\r\n\r\nconst EmployeeProfile = ({ drawerOpen }: DashboardProps) => {\r\n    const classes = useStyles()\r\n    const { id } = useParams() as { id: string }\r\n    const { data, loading, refetch } = useQuery(getEmployeeQuery, { variables: { id } })\r\n    const [addEmployeeSkill] = useMutation(CreateEmployeeSkill)\r\n    const [deleteSkill] = useMutation(deleteSkillQuery)\r\n    const [employee, setEmployee] = useState<any>(EmployeePlaceholder)\r\n    const [adding, setAdding] = useState<boolean>(false);\r\n    const [skillsInput, setSkillsInput] = useState<SkillsType[]>([])\r\n\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            setEmployee((prevState: any) => data.getEmployee)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [loading])\r\n\r\n    const removeSkill = (skillId: string) => {\r\n        deleteSkill({ variables: { id: skillId } }).then(res => {\r\n            refetch().then(res => {\r\n                setEmployee((prevState: any) => res.data.getEmployee)\r\n            })\r\n        })\r\n    }\r\n\r\n    const handleSkills = (skills: SkillsType[]) => {\r\n        setSkillsInput(prevState => skills)\r\n    }\r\n\r\n    const submitSkills = () => {\r\n        for (let i = 0; i < skillsInput.length; i++) {\r\n            AsyncAddEmployeeSkill(employee.id, skillsInput[i].id)\r\n        }\r\n        refetch().then(res => {\r\n            setEmployee((prevState: any) => res.data.getEmployee)\r\n        })\r\n    }\r\n\r\n    const AsyncAddEmployeeSkill = async (employeeId: String, skillId: String) => {\r\n        const response = addEmployeeSkill({ variables: { employeeId, skillId } })\r\n        const data = await response\r\n        return data\r\n    }\r\n\r\n    const skillMap = employee.skills.items.map((skill: any, index: number) => {\r\n        return (\r\n            <Grid item className={classes.skill} key={index} onClick={() => removeSkill(skill.id)} >\r\n                <Typography className={classes.inline}>\r\n                    {skill.skill.name}\r\n                </Typography>\r\n                <IconButton className={classes.inline} >\r\n                    <RemoveCircleOutlineIcon />\r\n                </IconButton>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    let initials = employee.firstname[0].toUpperCase() + employee.lastname[0].toUpperCase()\r\n    return (\r\n        <div\r\n            className={clsx(classes.content, {\r\n                [classes.contentShift]: drawerOpen,\r\n            })}\r\n        >\r\n            <div className={classes.drawerHeader} />\r\n\r\n\r\n            <Paper className={classes.paper} >\r\n                <Grid container>\r\n                    <Grid item xs={6}>\r\n                        <div className={classes.avatar} >\r\n                            <Typography variant='h1'>{initials}</Typography>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={6} className={classes.center} >\r\n                        <Typography> Employee Since: {employee.createdAt}</Typography>\r\n                    </Grid>\r\n                    <Typography variant=\"h6\">\r\n                        {employee.firstname} {employee.lastname}\r\n                    </Typography>\r\n\r\n                    <Grid container spacing={3} alignItems=\"center\" >\r\n                        <Typography variant=\"body1\">Skills:</Typography>\r\n                        {skillMap}\r\n                        <IconButton onClick={() => setAdding(prevVal => !prevVal)} >\r\n                            <AddBoxIcon />\r\n                        </IconButton>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <Paper\r\n                className={clsx(classes.paper, {\r\n                    [classes.hidden]: !adding\r\n                })} >\r\n                <Typography>Enter desired skills</Typography>\r\n                <SkillAutocomplete handleSkills={handleSkills} />\r\n                <Button variant=\"contained\" onClick={submitSkills}>Submit</Button>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmployeeProfile","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport TopAppBar from './components/TopAppBar'\nimport AppDrawer from './components/AppDrawer'\nimport Theming from './components/Theming'\nimport { Route } from 'react-router-dom'\nimport Employees from './components/Employees'\nimport Skills from './components/Skills'\nimport EmployeeProfile from './components/EmployeeProfile'\nexport const drawerWidth = 250\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n  }\n})\n\nconst App = () => {\n  const classes = useStyles()\n  const [drawerOpen, setDrawerOpen] = useState<boolean>(true)\n  const handleSetDrawerOpen = () => setDrawerOpen(prevState => !prevState )\n\n  return (\n    <Theming>\n      <CssBaseline>\n      <div className={classes.root} >\n        <TopAppBar \n          drawerOpen={drawerOpen} \n          setDrawerOpen={handleSetDrawerOpen}\n        />\n        <AppDrawer \n          drawerOpen={drawerOpen} \n          setDrawerOpen={handleSetDrawerOpen}\n        />\n        {/* <Route exact path='/' component={() => <Dashboard drawerOpen={drawerOpen} />} /> */}\n        <Route exact path='/' component={() => <Employees drawerOpen={drawerOpen} />} />\n        <Route path='/employees/:id' component={() => <EmployeeProfile drawerOpen={drawerOpen} />} />\n        <Route path='/skills' component={() => <Skills drawerOpen={drawerOpen} />} />\n        </div>\n        </CssBaseline>\n    </Theming>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_appsync_graphqlEndpoint\": \"https://3vv5zivppzaj7cz2fpngqqr2mq.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-2hnsb2eotzh25fppttxy2d5aw4\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport awsExports from './aws-exports';\nimport Amplify from 'aws-amplify'\nimport { AUTH_TYPE } from 'aws-appsync'\nimport { ApolloProvider, ApolloClient, InMemoryCache, ApolloLink, createHttpLink } from '@apollo/client';\nimport { createAuthLink } from \"aws-appsync-auth-link\";\n\nAmplify.configure(awsExports)\n\nconst config = {\n  url: awsExports.aws_appsync_graphqlEndpoint,\n  region: awsExports.aws_appsync_region,\n  auth: {\n    type: AUTH_TYPE.API_KEY, // or type: awsExports.aws_appsync_authenticationType,\n    apiKey: awsExports.aws_appsync_apiKey,\n  },\n}\n\nconst link = ApolloLink.from([\n  // @ts-ignore\n  createAuthLink(config),\n  createHttpLink({uri: awsExports.aws_appsync_graphqlEndpoint})\n  // @ts-ignore\n  // createSubscriptionHandshakeLink(config)\n]);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache({ addTypename: false })\n});\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client as any} >\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}